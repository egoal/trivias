createdAt: "2018-11-05T02:33:49.841Z"
updatedAt: "2020-08-13T15:26:27.072Z"
type: "MARKDOWN_NOTE"
folder: "3ee76ac761e39836b6e0"
title: "love2d"
content: '''
  ## love2d
  
  ```lua
  -- shader
  local shader_str = [[
  extern number _time = 0.;
  const number T = 4.;
  const number B = 0.01;
  
  number plot(number x, number y, number width){
      return smoothstep(y- width, y, x)- smoothstep(y, y+ width, x);
  }
  
  vec4 color_lerp(vec4 c1, vec4 c2, number a){
      return (1- a)* c1+ a* c2;
  }
  
  vec4 effect(vec4 color, Image texture, vec2 texture_coords, vec2 screen_coords){
      vec4 pixel = Texel(texture, texture_coords); 
  
      number margin = 0.;
      if(_time< 2.) margin = min(0.1* _time, 0.2);
      else if(_time< 3.) margin = 0.2;
      else if(_time< 5.) margin = 0.2- (_time-3.)* 0.1;
      
      if(texture_coords.y< margin || texture_coords.y> (1-margin)) return vec4(0.);
  
      pixel *= 1.- 2.* margin;
  
      return pixel;
  }
  
  ]]
  
  -- load
  shader = love.graphics.newShader(shader_str)
  
  -- update
  shader:send("_time", passed_time)
  
  -- draw
  love.graphics.setShader(shader)
  -- draw things here
  love.graphics.setShader()
  
  ```
  
  ---
  #### thirdparty
  ojbect-orient 
  > git clone https://github.com/rxi/classic
  
  input 
  > git clone https://github.com/adnzzzzZ/boipushy
  ```lua
  input = Input()
  
  :bind(keycode, action_name)
  :bind(keycode| mouse, on_pressed| on_mouse_down)
  
  ```
  
  timer 
  > git clone https://github.com/adnzzzzZ/chrono
  ```lua
  -- refer to hump/timer 
  timer = Timer()
  
  :update(dt) -- this should be called in each frame
  :after(time, on_timeout)
  :every(time, on_each_time)
  :tween(time, target, table_result_attributes, mode_interp, [on_done])
  :cancel(handle) -- handle is returned by above functions
  
  ```
  
  camera
  > git clone https://github.com/adnzzzzZ/STALKER-X
  
  lighting
  > git clone https://github.com/dylhunn/simple-love-lights
  > git clone https://github.com/matiasah/shadows
  
  aabb collider
  > git clone https://github.com/kikito/bump.lua
  
  assets manager
  > git clone https://github.com/bjornbytes/cargo
  
  frame animation
  > git clone https://github.com/kikito/anim8
  
  path finding
  > git clone https://github.com/Yonaba/Jumper
  
  functional 
  > git clone https://github.com/Yonaba/Moses
  ```lua
  M = require 'Moses/moses'
  
  M.each(table, func_value_key)
  M.at(table, keys...) -- slice, give sub table
  M.adjust(table, key, value| func)
  M.count(table, value)
  M.countf(table, func_pass)
  M.allEqual(table, [func_compare])
  M.map(table, func_value| func_value_key) -- can maps both keys and values
  M.reduce(table, func_v0_v1)
  
  ```
  gui
  > git clone https://github.com/Ulydev/Uare
  > git clone https://github.com/vrld/suit
  
  serialization
  > git clone https://github.com/gvx/bitser/
  
  utility 
  > git clone https://github.com/vrld/hump
  > git clone https://github.com/rxi/lume
  
  fov
  > git clone https://github.com/markandgo/Lua-FOV
  
  ecs
  > git clone https://github.com/bakpakin/tiny-ecs
  
  messagebox
  > git clone https://github.com/ttxi/Moan.lua
'''
tags: []
isStarred: false
isTrashed: false
linesHighlighted: []
